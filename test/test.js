QUnit.config.maxDepth = -1;
QUnit.config.noglobals = true;
QUnit.config.seed = true;

import { schema, verbClasses, validVerbClasses, getForms, causativeFormsKey, } from "../dist/ilakkanam.min.js";

QUnit.module("schema", () => {
    QUnit.test("schema is a map of strings", t => {
        t.true(schema instanceof Map,);
        schema.forEach((k, v,) => {
            t.strictEqual(typeof k, "string",);
            t.strictEqual(typeof v, "string",);
        },);
    },);
},);

QUnit.module("verbClasses", () => {
    QUnit.test("verbClasses is an Array of strings", t => {
        t.true(Array.isArray(verbClasses,),);
        verbClasses.forEach(வினயினத்துப்பெயர் => {
            t.strictEqual(typeof வினயினத்துப்பெயர், "string",);
        },);
    },);
    QUnit.module("validVerbClasses", () => {
        const assertValid = (t, வினயினம்,) => வினய் => {
            t.true(validVerbClasses(வினய்,).includes(வினயினம்,),);
        };
        const assertInvalid = (t, வினயினம்,) => வினய் => {
            t.false(validVerbClasses(வினய்,).includes(வினயினம்,),);
        };
        QUnit.test("வாங்கு", t => {
            ["ஊது",].forEach(assertValid(t, "வாங்கு",),);
            ["கல்", "கல", "தெரி", "போ",].forEach(assertInvalid(t, "வாங்கு",),);
        },);
        QUnit.test("பார்", t => { t.expect(0,); },); // பார் is always a valid இனம்
        QUnit.test("இரு", t => { t.expect(0,); },); // இரு is always a valid இனம்
        QUnit.test("உயர்", t => {
            ["ஈ", "அணி", "மிகு", "உயர்", "வீழ்", "குலய்", "கல்",].forEach(assertValid(t, "உயர்",),);
            ["கல",].forEach(assertInvalid(t, "உயர்",),);
        },);
        QUnit.test("சொல்", t => {
            ["சொல்",].forEach(assertValid(t, "சொல்",),);
            ["வாங்கு", "போ", "அணி",].forEach(assertInvalid(t, "சொல்",),);
        },);
        QUnit.test("செய்", t => { t.expect(0,); },); // செய் is always a valid இனம்
        QUnit.test("இடு", t => {
            ["போடு", "பெறு",].forEach(assertValid(t, "இடு",),);
            ["பரவு", "உயர்", "விழு", "கடி", "தின்", "உண்",].forEach(assertInvalid(t, "இடு",),);
        },);
        QUnit.test("தகு", t => {
            ["புகு", "மிகு",].forEach(assertValid(t, "தகு",),);
            ["இடு", "விழு", "கடி", "தின்", "பரவு",].forEach(assertInvalid(t, "தகு",),);
        },);
        QUnit.test("வா", t => {
            ["தா",].forEach(assertValid(t, "வா",),);
            ["கல்", "கல", "தெரி", "போ", "வாங்கு", "உயர்",].forEach(assertInvalid(t, "வா",),);
        },);
        QUnit.test("காண்", t => {
            ["காண்",].forEach(assertValid(t, "காண்",),);
            ["வாங்கு", "உயர்", "விழு", "கடி", "பெறு", "தொடு", "உண்", "கல்", "கல",].forEach(assertInvalid(t, "காண்",),);
        },);
        QUnit.test("போது", t => {
            ["போது",].forEach(assertValid(t, "போது",),);
            ["உயர்", "விழு", "கடி", "பெறு", "தொடு", "உண்", "கல்", "கல",].forEach(assertInvalid(t, "போது",),);
        },);
        QUnit.test("போ", t => {
            ["போ", "சா",].forEach(assertValid(t, "போ",),);
            ["வாங்கு", "உயர்", "விழு", "கடி", "பெறு", "தொடு", "உண்", "கல்", "கல",].forEach(assertInvalid(t, "போ",),);
        },);
        QUnit.test("நோ", t => {
            ["நோ",].forEach(assertValid(t, "நோ",),);
            ["வாங்கு", "உயர்", "விழு", "கடி", "பெறு", "தொடு", "உண்", "கல்", "கல", "சா",].forEach(assertInvalid(t, "நோ",),);
        },);
        QUnit.test("சா", t => {
            ["சா",].forEach(assertValid(t, "சா",),);
            ["வாங்கு", "உயர்", "விழு", "கடி", "பெறு", "தொடு", "உண்", "கல்", "கல", "நோ",].forEach(assertInvalid(t, "சா",),);
        },);
        QUnit.test("அல்", t => {
            ["அல்",].forEach(assertValid(t, "அல்",),);
            ["கல்", "கல", "தெரி", "போ",].forEach(assertInvalid(t, "அல்",),);
        },);
        QUnit.test("உள்", t => {
            ["உள்",].forEach(assertValid(t, "உள்",),);
            ["வாங்கு", "உயர்", "விழு", "கடி", "பெறு", "தொடு", "உண்", "கல்", "கல", "சா", "போ",].forEach(assertInvalid(t, "உள்",),);
        },);
        QUnit.test("இல்", t => {
            ["இல்",].forEach(assertValid(t, "இல்",),);
            ["வாங்கு", "உயர்", "விழு", "கடி", "பெறு", "தொடு", "உண்", "கல்", "கல", "சா", "போ",].forEach(assertInvalid(t, "இல்",),);
        },);
        QUnit.test("மாட்டு", t => {
            ["மாட்டு",].forEach(assertValid(t, "மாட்டு",),);
            ["வாங்கு", "உயர்", "விழு", "கடி", "காட்டு", "பெறு", "தொடு", "உண்", "கல்", "கல", "சா", "போ",].forEach(assertInvalid(t, "மாட்டு",),);
        },);
    },);
},);

QUnit.module("getForms", () => {
    QUnit.module("With unambiguous இனம்", () => {
        QUnit.module("வாங்குவும் போதுவும்", () => {
            QUnit.test("நம்பு", t => {
                const expected = new Map([
                    ["இனம்", "வாங்கு",],
                    ["ஏவல்வினய்முற்று", new Set(["நம்பு",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["நம்பார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["நம்பினார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["நம்புகின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["நம்புவார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["நம்ப",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["நம்பி",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["நம்பிய", "நம்பின",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["நம்புகின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["நம்பும்",],),],
                    ["தொழிற்பெயர்", new Set(["நம்புதல்",],),],
                ],);
                t.deepEqual(getForms("நம்பு",), expected,);
            },);
            QUnit.test("உலாவு", t => {
                const expected = new Map([
                    ["இனம்", "வாங்கு",],
                    ["ஏவல்வினய்முற்று", new Set(["உலாவு",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["உலாவார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["உலாவினார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["உலாவுகின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["உலாவுவார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["உலாவ",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["உலாவி",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["உலாவிய", "உலாவின",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["உலாவுகின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["உலாவும்",],),],
                    ["தொழிற்பெயர்", new Set(["உலாவுதல்",],),],
                    [causativeFormsKey, new Map([
                        ["இனம்", "வாங்கு",],
                        ["ஏவல்வினய்முற்று", new Set(["உலாத்து",],),],
                        ["எதிர்மறய்வினய்முற்று", new Set(["உலாத்தார்",],),],
                        ["இறந்தகாலத்துவினய்முற்று", new Set(["உலாத்தினார்",],),],
                        ["நிகழ்காலத்துவினய்முற்று", new Set(["உலாத்துகின்றார்",],),],
                        ["எதிர்காலத்துவினய்முற்று", new Set(["உலாத்துவார்",],),],
                        ["எதிர்காலத்துவினயெச்சம்", new Set(["உலாத்த",],),],
                        ["இறந்தகாலத்துவினயெச்சம்", new Set(["உலாத்தி",],),],
                        ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["உலாத்திய", "உலாத்தின",],),],
                        ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["உலாத்துகின்ற",],),],
                        ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["உலாத்தும்",],),],
                        ["தொழிற்பெயர்", new Set(["உலாத்துதல்",],),],
                    ],),],
                ],);
                t.deepEqual(getForms("உலாவு",), expected,);
            },);
            QUnit.test("போது", t => {
                const expected = new Map([
                    ["இனம்", "போது",],
                    ["ஏவல்வினய்முற்று", new Set(["போது",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["போதார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["போதினார்", "போந்தார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["போதுகின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["போதுவார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["போத",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["போதி", "போந்து",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["போதிய", "போந்த",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["போதுகின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["போதும்",],),],
                    ["தொழிற்பெயர்", new Set(["போதுதல்",],),],
                ],);
                t.deepEqual(getForms("போது",), expected,);
            },);
        },);
        QUnit.module("பாரும் இருவும்", () => {
            QUnit.test("எடு", t => {
                const expected = new Map([
                    ["இனம்", "பார்",],
                    ["ஏவல்வினய்முற்று", new Set(["எடு",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["எடார்", "எடுக்கார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["எடுத்தார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["எடுக்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["எடுப்பார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["எடுக்க",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["எடுத்து",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["எடுத்த",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["எடுக்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["எடுக்கும்",],),],
                    ["தொழிற்பெயர்", new Set(["எடுத்தல்",],),],
                ],);
                t.deepEqual(getForms("எடு",), expected,);
            },);
            QUnit.test("கேள்", t => {
                const expected = new Map([
                    ["இனம்", "பார்",],
                    ["ஏவல்வினய்முற்று", new Set(["கேள்",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["கேளார்", "கேட்கார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["கேட்டார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["கேட்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["கேட்பார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["கேட்க",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["கேட்டு",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["கேட்ட",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["கேட்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["கேட்கும்",],),],
                    ["தொழிற்பெயர்", new Set(["கேட்டல்",],),],
                ],);
                t.deepEqual(getForms("கேள்",), expected,);
            },);
            QUnit.test("வில்", t => {
                const expected = new Map([
                    ["இனம்", "பார்",],
                    ["ஏவல்வினய்முற்று", new Set(["வில்",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["வில்லார்", "விற்கார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["விற்றார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["விற்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["விற்பார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["விற்க",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["விற்று",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["விற்ற",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["விற்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["விற்கும்",],),],
                    ["தொழிற்பெயர்", new Set(["விற்றல்",],),],
                    [causativeFormsKey, new Map([
                        ["இனம்", "பார்",],
                        ["ஏவல்வினய்முற்று", new Set(["வில்",],),],
                        ["எதிர்மறய்வினய்முற்று", new Set(["வில்லார்", "விற்கார்",],),],
                        ["இறந்தகாலத்துவினய்முற்று", new Set(["விற்றார்",],),],
                        ["நிகழ்காலத்துவினய்முற்று", new Set(["விற்கின்றார்",],),],
                        ["எதிர்காலத்துவினய்முற்று", new Set(["விற்பார்",],),],
                        ["எதிர்காலத்துவினயெச்சம்", new Set(["விற்க",],),],
                        ["இறந்தகாலத்துவினயெச்சம்", new Set(["விற்று",],),],
                        ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["விற்ற",],),],
                        ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["விற்கின்ற",],),],
                        ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["விற்கும்",],),],
                        ["தொழிற்பெயர்", new Set(["விற்றல்",],),],
                    ],),],
                ],);
                t.deepEqual(getForms("வில்",), expected,);
            },);
            QUnit.test("ஒ", t => {
                const expected = new Map([
                    ["இனம்", "பார்",],
                    ["ஏவல்வினய்முற்று", new Set(["ஒ",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["ஒவ்வார்", "ஒக்கார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["ஒத்தார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["ஒக்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["ஒப்பார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["ஒக்க",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["ஒத்து",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["ஒத்த",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["ஒக்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["ஒக்கும்",],),],
                    ["தொழிற்பெயர்", new Set(["ஒத்தல்",],),],
                ],);
                t.deepEqual(getForms("ஒ",), expected,);
            },);
            QUnit.test("அள", t => {
                const expected = new Map([
                    ["இனம்", "இரு",],
                    ["ஏவல்வினய்முற்று", new Set(["அள",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["அளவார்", "அளக்கார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["அளந்தார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["அளக்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["அளப்பார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["அளக்க",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["அளந்து",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["அளந்த",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["அளக்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["அளக்கும்",],),],
                    ["தொழிற்பெயர்", new Set(["அளத்தல்",],),],
                ],);
                t.deepEqual(getForms("அள",), expected,);
            },);
            QUnit.test("மோ", t => {
                const expected = new Map([
                    ["இனம்", "இரு",],
                    ["ஏவல்வினய்முற்று", new Set(["மோ",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["மோவார்", "மோக்கார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["மோந்தார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["மோக்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["மோப்பார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["மோக்க",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["மோந்து",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["மோந்த",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["மோக்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["மோக்கும்",],),],
                    ["தொழிற்பெயர்", new Set(["மோத்தல்",],),],
                ],);
                t.deepEqual(getForms("மோ",), expected,);
            },);
            QUnit.test("நில்", t => {
                const expected = new Map([
                    ["இனம்", "இரு",],
                    ["ஏவல்வினய்முற்று", new Set(["நில்",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["நில்லார்", "நிற்கார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["நின்றார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["நிற்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["நிற்பார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["நிற்க",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["நின்று",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["நின்ற",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["நிற்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["நிற்கும்",],),],
                    ["தொழிற்பெயர்", new Set(["நிற்றல்",],),],
                    [causativeFormsKey, new Map([
                        ["இனம்", "வாங்கு",],
                        ["ஏவல்வினய்முற்று", new Set(["நிறுத்து",],),],
                        ["எதிர்மறய்வினய்முற்று", new Set(["நிறுத்தார்",],),],
                        ["இறந்தகாலத்துவினய்முற்று", new Set(["நிறுத்தினார்",],),],
                        ["நிகழ்காலத்துவினய்முற்று", new Set(["நிறுத்துகின்றார்",],),],
                        ["எதிர்காலத்துவினய்முற்று", new Set(["நிறுத்துவார்",],),],
                        ["எதிர்காலத்துவினயெச்சம்", new Set(["நிறுத்த",],),],
                        ["இறந்தகாலத்துவினயெச்சம்", new Set(["நிறுத்தி",],),],
                        ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["நிறுத்திய", "நிறுத்தின",],),],
                        ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["நிறுத்துகின்ற",],),],
                        ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["நிறுத்தும்",],),],
                        ["தொழிற்பெயர்", new Set(["நிறுத்துதல்",],),],
                    ],),],
                ],);
                t.deepEqual(getForms("நில்",), expected,);
            },);
        },);
        QUnit.module("உயரும் சொல்லும்", () => {
            QUnit.test("வாழ்", t => {
                const expected = new Map([
                    ["இனம்", "உயர்",],
                    ["ஏவல்வினய்முற்று", new Set(["வாழ்",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["வாழார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["வாழ்ந்தார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["வாழ்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["வாழ்வார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["வாழ",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["வாழ்ந்து",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["வாழ்ந்த",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["வாழ்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["வாழும்",],),],
                    ["தொழிற்பெயர்", new Set(["வாழ்தல்",],),],
                    [causativeFormsKey, new Map([
                        ["இனம்", "வாங்கு",],
                        ["ஏவல்வினய்முற்று", new Set(["வாழ்த்து",],),],
                        ["எதிர்மறய்வினய்முற்று", new Set(["வாழ்த்தார்",],),],
                        ["இறந்தகாலத்துவினய்முற்று", new Set(["வாழ்த்தினார்",],),],
                        ["நிகழ்காலத்துவினய்முற்று", new Set(["வாழ்த்துகின்றார்",],),],
                        ["எதிர்காலத்துவினய்முற்று", new Set(["வாழ்த்துவார்",],),],
                        ["எதிர்காலத்துவினயெச்சம்", new Set(["வாழ்த்த",],),],
                        ["இறந்தகாலத்துவினயெச்சம்", new Set(["வாழ்த்தி",],),],
                        ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["வாழ்த்திய", "வாழ்த்தின",],),],
                        ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["வாழ்த்துகின்ற",],),],
                        ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["வாழ்த்தும்",],),],
                        ["தொழிற்பெயர்", new Set(["வாழ்த்துதல்",],),],
                    ],),],
                ],);
                t.deepEqual(getForms("வாழ்",), expected,);
            },);
            QUnit.test("பயில்", t => {
                const expected = new Map([
                    ["இனம்", "உயர்",],
                    ["ஏவல்வினய்முற்று", new Set(["பயில்",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["பயிலார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["பயின்றார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["பயில்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["பயில்வார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["பயில",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["பயின்று",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["பயின்ற",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["பயில்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["பயிலும்",],),],
                    ["தொழிற்பெயர்", new Set(["பயிலுதல்", "பயிற்றல்",],),],
                ],);
                t.deepEqual(getForms("பயில்",), expected,);
            },);
            QUnit.test("ஆள்", t => {
                const expected = new Map([
                    ["இனம்", "உயர்",],
                    ["ஏவல்வினய்முற்று", new Set(["ஆள்",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["ஆளார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["ஆண்டார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["ஆள்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["ஆள்வார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["ஆள",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["ஆண்டு",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["ஆண்ட",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["ஆள்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["ஆளும்",],),],
                    ["தொழிற்பெயர்", new Set(["ஆளுதல்", "ஆட்டல்",],),],
                ],);
                t.deepEqual(getForms("ஆள்",), expected,);
            },);
            QUnit.test("செல்", t => {
                const expected = new Map([
                    ["இனம்", "உயர்",],
                    ["ஏவல்வினய்முற்று", new Set(["செல்",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["செல்லார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["சென்றார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["செல்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["செல்வார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["செல்ல",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["சென்று",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["சென்ற",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["செல்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["செல்லும்",],),],
                    ["தொழிற்பெயர்", new Set(["செல்லுதல்", "செற்றல்",],),],
                    [causativeFormsKey, new Map([
                        ["இனம்", "வாங்கு",],
                        ["ஏவல்வினய்முற்று", new Set(["செலுத்து",],),],
                        ["எதிர்மறய்வினய்முற்று", new Set(["செலுத்தார்",],),],
                        ["இறந்தகாலத்துவினய்முற்று", new Set(["செலுத்தினார்",],),],
                        ["நிகழ்காலத்துவினய்முற்று", new Set(["செலுத்துகின்றார்",],),],
                        ["எதிர்காலத்துவினய்முற்று", new Set(["செலுத்துவார்",],),],
                        ["எதிர்காலத்துவினயெச்சம்", new Set(["செலுத்த",],),],
                        ["இறந்தகாலத்துவினயெச்சம்", new Set(["செலுத்தி",],),],
                        ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["செலுத்திய", "செலுத்தின",],),],
                        ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["செலுத்துகின்ற",],),],
                        ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["செலுத்தும்",],),],
                        ["தொழிற்பெயர்", new Set(["செலுத்துதல்",],),],
                    ],),],
                ],);
                t.deepEqual(getForms("செல்",), expected,);
            },);
            QUnit.test("கொள்", t => {
                const expected = new Map([
                    ["இனம்", "உயர்",],
                    ["ஏவல்வினய்முற்று", new Set(["கொள்",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["கொள்ளார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["கொண்டார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["கொள்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["கொள்வார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["கொள்ள",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["கொண்டு",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["கொண்ட",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["கொள்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["கொள்ளும்",],),],
                    ["தொழிற்பெயர்", new Set(["கொள்ளுதல்", "கொட்டல்",],),],
                ],);
                t.deepEqual(getForms("கொள்",), expected,);
            },);
            QUnit.test("சொல்", t => {
                const expected = new Map([
                    ["இனம்", "சொல்",],
                    ["ஏவல்வினய்முற்று", new Set(["சொல்",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["சொல்லார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["சொன்னார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["சொல்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["சொல்வார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["சொல்ல",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["சொல்லி",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["சொன்ன", "சொல்லிய",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["சொல்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["சொல்லும்",],),],
                    ["தொழிற்பெயர்", new Set(["சொல்லுதல்", "சொற்றல்",],),],
                    [causativeFormsKey, new Map([
                        ["இனம்", "பார்",],
                        ["ஏவல்வினய்முற்று", new Set(["சொல்லுவி",],),],
                        ["எதிர்மறய்வினய்முற்று", new Set(["சொல்லுவியார்", "சொல்லுவிக்கார்",],),],
                        ["இறந்தகாலத்துவினய்முற்று", new Set(["சொல்லுவித்தார்",],),],
                        ["நிகழ்காலத்துவினய்முற்று", new Set(["சொல்லுவிக்கின்றார்",],),],
                        ["எதிர்காலத்துவினய்முற்று", new Set(["சொல்லுவிப்பார்",],),],
                        ["எதிர்காலத்துவினயெச்சம்", new Set(["சொல்லுவிக்க",],),],
                        ["இறந்தகாலத்துவினயெச்சம்", new Set(["சொல்லுவித்து",],),],
                        ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["சொல்லுவித்த",],),],
                        ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["சொல்லுவிக்கின்ற",],),],
                        ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["சொல்லுவிக்கும்",],),],
                        ["தொழிற்பெயர்", new Set(["சொல்லுவித்தல்",],),],
                    ],),],
                ],);
                t.deepEqual(getForms("சொல்",), expected,);
            },);
        },);
        QUnit.module("செய்யும் இடுவும் தகுவும் வாவும் காணும்", () => {
            QUnit.test("அழு", t => {
                const expected = new Map([
                    ["இனம்", "செய்",],
                    ["ஏவல்வினய்முற்று", new Set(["அழு",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["அழார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["அழுதார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["அழுகின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["அழுவார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["அழ",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["அழுது",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["அழுத",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["அழுகின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["அழும்",],),],
                    ["தொழிற்பெயர்", new Set(["அழுதல்",],),],
                    [causativeFormsKey, new Map([
                        ["இனம்", "பார்",],
                        ["ஏவல்வினய்முற்று", new Set(["அழுவி",],),],
                        ["எதிர்மறய்வினய்முற்று", new Set(["அழுவியார்", "அழுவிக்கார்",],),],
                        ["இறந்தகாலத்துவினய்முற்று", new Set(["அழுவித்தார்",],),],
                        ["நிகழ்காலத்துவினய்முற்று", new Set(["அழுவிக்கின்றார்",],),],
                        ["எதிர்காலத்துவினய்முற்று", new Set(["அழுவிப்பார்",],),],
                        ["எதிர்காலத்துவினயெச்சம்", new Set(["அழுவிக்க",],),],
                        ["இறந்தகாலத்துவினயெச்சம்", new Set(["அழுவித்து",],),],
                        ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["அழுவித்த",],),],
                        ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["அழுவிக்கின்ற",],),],
                        ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["அழுவிக்கும்",],),],
                        ["தொழிற்பெயர்", new Set(["அழுவித்தல்",],),],
                    ],),],
                ],);
                t.deepEqual(getForms("அழு",), expected,);
            },);
            QUnit.test("தொகு", t => {
                const expected = new Map([
                    ["இனம்", "இடு",],
                    ["ஏவல்வினய்முற்று", new Set(["தொகு",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["தொகார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["தொக்கார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["தொகுகின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["தொகுவார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["தொக",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["தொக்கு",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["தொக்க",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["தொகுகின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["தொகும்",],),],
                    ["தொழிற்பெயர்", new Set(["தொக்கல்", "தொகுதல்",],),],
                    [causativeFormsKey, new Map([
                        ["இனம்", "பார்",],
                        ["ஏவல்வினய்முற்று", new Set(["தொகு",],),],
                        ["எதிர்மறய்வினய்முற்று", new Set(["தொகார்", "தொகுக்கார்",],),],
                        ["இறந்தகாலத்துவினய்முற்று", new Set(["தொகுத்தார்",],),],
                        ["நிகழ்காலத்துவினய்முற்று", new Set(["தொகுக்கின்றார்",],),],
                        ["எதிர்காலத்துவினய்முற்று", new Set(["தொகுப்பார்",],),],
                        ["எதிர்காலத்துவினயெச்சம்", new Set(["தொகுக்க",],),],
                        ["இறந்தகாலத்துவினயெச்சம்", new Set(["தொகுத்து",],),],
                        ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["தொகுத்த",],),],
                        ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["தொகுக்கின்ற",],),],
                        ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["தொகுக்கும்",],),],
                        ["தொழிற்பெயர்", new Set(["தொகுத்தல்",],),],
                    ],),],
                ],);
                t.deepEqual(getForms("தொகு",), expected,);
            },);
            QUnit.test("சுடு", t => {
                const expected = new Map([
                    ["இனம்", "இடு",],
                    ["ஏவல்வினய்முற்று", new Set(["சுடு",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["சுடார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["சுட்டார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["சுடுகின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["சுடுவார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["சுட",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["சுட்டு",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["சுட்ட",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["சுடுகின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["சுடும்",],),],
                    ["தொழிற்பெயர்", new Set(["சுட்டல்", "சுடுதல்",],),],
                    [causativeFormsKey, new Map([
                        ["இனம்", "இடு",],
                        ["ஏவல்வினய்முற்று", new Set(["சுடு",],),],
                        ["எதிர்மறய்வினய்முற்று", new Set(["சுடார்",],),],
                        ["இறந்தகாலத்துவினய்முற்று", new Set(["சுட்டார்",],),],
                        ["நிகழ்காலத்துவினய்முற்று", new Set(["சுடுகின்றார்",],),],
                        ["எதிர்காலத்துவினய்முற்று", new Set(["சுடுவார்",],),],
                        ["எதிர்காலத்துவினயெச்சம்", new Set(["சுட",],),],
                        ["இறந்தகாலத்துவினயெச்சம்", new Set(["சுட்டு",],),],
                        ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["சுட்ட",],),],
                        ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["சுடுகின்ற",],),],
                        ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["சுடும்",],),],
                        ["தொழிற்பெயர்", new Set(["சுட்டல்", "சுடுதல்",],),],
                    ],),],
                ],);
                t.deepEqual(getForms("சுடு",), expected,);
            },);
            QUnit.test("பெறு", t => {
                const expected = new Map([
                    ["இனம்", "இடு",],
                    ["ஏவல்வினய்முற்று", new Set(["பெறு",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["பெறார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["பெற்றார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["பெறுகின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["பெறுவார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["பெற",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["பெற்று",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["பெற்ற",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["பெறுகின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["பெறும்",],),],
                    ["தொழிற்பெயர்", new Set(["பெற்றல்", "பெறுதல்",],),],
                ],);
                t.deepEqual(getForms("பெறு",), expected,);
            },);
            QUnit.test("மிகு", t => {
                const expected = new Map([
                    ["இனம்", "தகு",],
                    ["ஏவல்வினய்முற்று", new Set(["மிகு",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["மிகார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["மிக்கார்", "மிகுந்தார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["மிகுகின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["மிகுவார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["மிக",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["மிக்கு", "மிகுந்து",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["மிக்க", "மிகுந்த",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["மிகுகின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["மிகும்",],),],
                    ["தொழிற்பெயர்", new Set(["மிக்கல்", "மிகுதல்",],),],
                ],);
                t.deepEqual(getForms("மிகு",), expected,);
            },);
            QUnit.test("தா", t => {
                const expected = new Map([
                    ["இனம்", "வா",],
                    ["ஏவல்வினய்முற்று", new Set(["தா",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["தரார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["தந்தார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["தருகின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["தருவார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["தர",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["தந்து",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["தந்த",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["தருகின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["தரும்",],),],
                    ["தொழிற்பெயர்", new Set(["தருதல்",],),],
                    [causativeFormsKey, new Map([
                        ["இனம்", "பார்",],
                        ["ஏவல்வினய்முற்று", new Set(["தருவி",],),],
                        ["எதிர்மறய்வினய்முற்று", new Set(["தருவியார்", "தருவிக்கார்",],),],
                        ["இறந்தகாலத்துவினய்முற்று", new Set(["தருவித்தார்",],),],
                        ["நிகழ்காலத்துவினய்முற்று", new Set(["தருவிக்கின்றார்",],),],
                        ["எதிர்காலத்துவினய்முற்று", new Set(["தருவிப்பார்",],),],
                        ["எதிர்காலத்துவினயெச்சம்", new Set(["தருவிக்க",],),],
                        ["இறந்தகாலத்துவினயெச்சம்", new Set(["தருவித்து",],),],
                        ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["தருவித்த",],),],
                        ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["தருவிக்கின்ற",],),],
                        ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["தருவிக்கும்",],),],
                        ["தொழிற்பெயர்", new Set(["தருவித்தல்",],),],
                    ],),],
                ],);
                t.deepEqual(getForms("தா",), expected,);
            },);
            QUnit.test("என்", t => {
                const expected = new Map([
                    ["இனம்", "செய்",],
                    ["ஏவல்வினய்முற்று", new Set(["என்",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["என்னார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["என்றார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["என்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["என்பார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["என்ன",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["என்று",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["என்ற",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["என்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["என்னும்",],),],
                    ["தொழிற்பெயர்", new Set(["என்றல்", "என்னுதல்",],),],
                    [causativeFormsKey, new Map([
                        ["இனம்", "பார்",],
                        ["ஏவல்வினய்முற்று", new Set(["என்பி",],),],
                        ["எதிர்மறய்வினய்முற்று", new Set(["என்பியார்", "என்பிக்கார்",],),],
                        ["இறந்தகாலத்துவினய்முற்று", new Set(["என்பித்தார்",],),],
                        ["நிகழ்காலத்துவினய்முற்று", new Set(["என்பிக்கின்றார்",],),],
                        ["எதிர்காலத்துவினய்முற்று", new Set(["என்பிப்பார்",],),],
                        ["எதிர்காலத்துவினயெச்சம்", new Set(["என்பிக்க",],),],
                        ["இறந்தகாலத்துவினயெச்சம்", new Set(["என்பித்து",],),],
                        ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["என்பித்த",],),],
                        ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["என்பிக்கின்ற",],),],
                        ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["என்பிக்கும்",],),],
                        ["தொழிற்பெயர்", new Set(["என்பித்தல்",],),],
                    ],),],
                ],);
                t.deepEqual(getForms("என்",), expected,);
            },);
            QUnit.test("உண்", t => {
                const expected = new Map([
                    ["இனம்", "செய்",],
                    ["ஏவல்வினய்முற்று", new Set(["உண்",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["உண்ணார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["உண்டார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["உண்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["உண்பார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["உண்ண",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["உண்டு",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["உண்ட",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["உண்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["உண்ணும்",],),],
                    ["தொழிற்பெயர்", new Set(["உண்டல்", "உண்ணுதல்",],),],
                    [causativeFormsKey, [
                        new Map([
                            ["இனம்", "வாங்கு",],
                            ["ஏவல்வினய்முற்று", new Set(["ஊட்டு",],),],
                            ["எதிர்மறய்வினய்முற்று", new Set(["ஊட்டார்",],),],
                            ["இறந்தகாலத்துவினய்முற்று", new Set(["ஊட்டினார்",],),],
                            ["நிகழ்காலத்துவினய்முற்று", new Set(["ஊட்டுகின்றார்",],),],
                            ["எதிர்காலத்துவினய்முற்று", new Set(["ஊட்டுவார்",],),],
                            ["எதிர்காலத்துவினயெச்சம்", new Set(["ஊட்ட",],),],
                            ["இறந்தகாலத்துவினயெச்சம்", new Set(["ஊட்டி",],),],
                            ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["ஊட்டிய", "ஊட்டின",],),],
                            ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["ஊட்டுகின்ற",],),],
                            ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["ஊட்டும்",],),],
                            ["தொழிற்பெயர்", new Set(["ஊட்டுதல்",],),],
                        ],),
                        new Map([
                            ["இனம்", "பார்",],
                            ["ஏவல்வினய்முற்று", new Set(["உண்பி",],),],
                            ["எதிர்மறய்வினய்முற்று", new Set(["உண்பியார்", "உண்பிக்கார்",],),],
                            ["இறந்தகாலத்துவினய்முற்று", new Set(["உண்பித்தார்",],),],
                            ["நிகழ்காலத்துவினய்முற்று", new Set(["உண்பிக்கின்றார்",],),],
                            ["எதிர்காலத்துவினய்முற்று", new Set(["உண்பிப்பார்",],),],
                            ["எதிர்காலத்துவினயெச்சம்", new Set(["உண்பிக்க",],),],
                            ["இறந்தகாலத்துவினயெச்சம்", new Set(["உண்பித்து",],),],
                            ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["உண்பித்த",],),],
                            ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["உண்பிக்கின்ற",],),],
                            ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["உண்பிக்கும்",],),],
                            ["தொழிற்பெயர்", new Set(["உண்பித்தல்",],),],
                        ],),
                    ],],
                ],);
                t.deepEqual(getForms("உண்",), expected,);
            },);
            QUnit.test("தின்", t => {
                const expected = new Map([
                    ["இனம்", "செய்",],
                    ["ஏவல்வினய்முற்று", new Set(["தின்",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["தின்னார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["தின்றார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["தின்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["தின்பார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["தின்ன",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["தின்று",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["தின்ற",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["தின்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["தின்னும்",],),],
                    ["தொழிற்பெயர்", new Set(["தின்றல்", "தின்னுதல்",],),],
                    [causativeFormsKey, new Map([
                        ["இனம்", "வாங்கு",],
                        ["ஏவல்வினய்முற்று", new Set(["தீற்று",],),],
                        ["எதிர்மறய்வினய்முற்று", new Set(["தீற்றார்",],),],
                        ["இறந்தகாலத்துவினய்முற்று", new Set(["தீற்றினார்",],),],
                        ["நிகழ்காலத்துவினய்முற்று", new Set(["தீற்றுகின்றார்",],),],
                        ["எதிர்காலத்துவினய்முற்று", new Set(["தீற்றுவார்",],),],
                        ["எதிர்காலத்துவினயெச்சம்", new Set(["தீற்ற",],),],
                        ["இறந்தகாலத்துவினயெச்சம்", new Set(["தீற்றி",],),],
                        ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["தீற்றிய", "தீற்றின",],),],
                        ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["தீற்றுகின்ற",],),],
                        ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["தீற்றும்",],),],
                        ["தொழிற்பெயர்", new Set(["தீற்றுதல்",],),],
                    ],),],
                ],);
                t.deepEqual(getForms("தின்",), expected,);
            },);
            QUnit.test("காண்", t => {
                const expected = new Map([
                    ["இனம்", "காண்",],
                    ["ஏவல்வினய்முற்று", new Set(["காண்",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["காணார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["கண்டார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["காண்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["காண்பார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["காண",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["கண்டு",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["கண்ட",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["காண்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["காணும்",],),],
                    ["தொழிற்பெயர்", new Set(["காண்டல்", "காணுதல்",],),],
                    [causativeFormsKey, [
                        new Map([
                            ["இனம்", "வாங்கு",],
                            ["ஏவல்வினய்முற்று", new Set(["காட்டு",],),],
                            ["எதிர்மறய்வினய்முற்று", new Set(["காட்டார்",],),],
                            ["இறந்தகாலத்துவினய்முற்று", new Set(["காட்டினார்",],),],
                            ["நிகழ்காலத்துவினய்முற்று", new Set(["காட்டுகின்றார்",],),],
                            ["எதிர்காலத்துவினய்முற்று", new Set(["காட்டுவார்",],),],
                            ["எதிர்காலத்துவினயெச்சம்", new Set(["காட்ட",],),],
                            ["இறந்தகாலத்துவினயெச்சம்", new Set(["காட்டி",],),],
                            ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["காட்டிய", "காட்டின",],),],
                            ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["காட்டுகின்ற",],),],
                            ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["காட்டும்",],),],
                            ["தொழிற்பெயர்", new Set(["காட்டுதல்",],),],
                        ],),
                        new Map([
                            ["இனம்", "பார்",],
                            ["ஏவல்வினய்முற்று", new Set(["காண்பி",],),],
                            ["எதிர்மறய்வினய்முற்று", new Set(["காண்பியார்", "காண்பிக்கார்",],),],
                            ["இறந்தகாலத்துவினய்முற்று", new Set(["காண்பித்தார்",],),],
                            ["நிகழ்காலத்துவினய்முற்று", new Set(["காண்பிக்கின்றார்",],),],
                            ["எதிர்காலத்துவினய்முற்று", new Set(["காண்பிப்பார்",],),],
                            ["எதிர்காலத்துவினயெச்சம்", new Set(["காண்பிக்க",],),],
                            ["இறந்தகாலத்துவினயெச்சம்", new Set(["காண்பித்து",],),],
                            ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["காண்பித்த",],),],
                            ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["காண்பிக்கின்ற",],),],
                            ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["காண்பிக்கும்",],),],
                            ["தொழிற்பெயர்", new Set(["காண்பித்தல்",],),],
                        ],),
                    ],],
                ],);
                t.deepEqual(getForms("காண்",), expected,);
            },);
        },);
        QUnit.module("கடயுயிர்", () => {
            QUnit.test("போ", t => {
                const expected = new Map([
                    ["இனம்", "போ",],
                    ["ஏவல்வினய்முற்று", new Set(["போ",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["போகார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["போனார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["போகின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["போவார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["போக",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["போய்",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["போன",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["போகின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["போகும்",],),],
                    ["தொழிற்பெயர்", new Set(["போதல்",],),],
                    [causativeFormsKey, new Map([
                        ["இனம்", "வாங்கு",],
                        ["ஏவல்வினய்முற்று", new Set(["போக்கு",],),],
                        ["எதிர்மறய்வினய்முற்று", new Set(["போக்கார்",],),],
                        ["இறந்தகாலத்துவினய்முற்று", new Set(["போக்கினார்",],),],
                        ["நிகழ்காலத்துவினய்முற்று", new Set(["போக்குகின்றார்",],),],
                        ["எதிர்காலத்துவினய்முற்று", new Set(["போக்குவார்",],),],
                        ["எதிர்காலத்துவினயெச்சம்", new Set(["போக்க",],),],
                        ["இறந்தகாலத்துவினயெச்சம்", new Set(["போக்கி",],),],
                        ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["போக்கிய", "போக்கின",],),],
                        ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["போக்குகின்ற",],),],
                        ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["போக்கும்",],),],
                        ["தொழிற்பெயர்", new Set(["போக்குதல்",],),],
                    ],),],
                ],);
                t.deepEqual(getForms("போ",), expected,);
            },);
            QUnit.test("ஆ", t => {
                const expected = new Map([
                    ["இனம்", "போ",],
                    ["ஏவல்வினய்முற்று", new Set(["ஆ",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["ஆகார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["ஆனார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["ஆகின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["ஆவார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["ஆக",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["ஆய்",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["ஆன",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["ஆகின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["ஆகும்",],),],
                    ["தொழிற்பெயர்", new Set(["ஆதல்",],),],
                    [causativeFormsKey, new Map([
                        ["இனம்", "வாங்கு",],
                        ["ஏவல்வினய்முற்று", new Set(["ஆக்கு",],),],
                        ["எதிர்மறய்வினய்முற்று", new Set(["ஆக்கார்",],),],
                        ["இறந்தகாலத்துவினய்முற்று", new Set(["ஆக்கினார்",],),],
                        ["நிகழ்காலத்துவினய்முற்று", new Set(["ஆக்குகின்றார்",],),],
                        ["எதிர்காலத்துவினய்முற்று", new Set(["ஆக்குவார்",],),],
                        ["எதிர்காலத்துவினயெச்சம்", new Set(["ஆக்க",],),],
                        ["இறந்தகாலத்துவினயெச்சம்", new Set(["ஆக்கி",],),],
                        ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["ஆக்கிய", "ஆக்கின",],),],
                        ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["ஆக்குகின்ற",],),],
                        ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["ஆக்கும்",],),],
                        ["தொழிற்பெயர்", new Set(["ஆக்குதல்",],),],
                    ],),],
                ],);
                t.deepEqual(getForms("ஆ",), expected,);
            },);
            QUnit.test("நோ", t => {
                const expected = new Map([
                    ["இனம்", "நோ",],
                    ["ஏவல்வினய்முற்று", new Set(["நோ",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["நோகார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["நொந்தார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["நோகின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["நோவார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["நோக",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["நொந்து",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["நொந்த",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["நோகின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["நோகும்",],),],
                    ["தொழிற்பெயர்", new Set(["நோதல்",],),],
                ],);
                t.deepEqual(getForms("நோ",), expected,);
            },);
            QUnit.test("வே", t => {
                const expected = new Map([
                    ["இனம்", "நோ",],
                    ["ஏவல்வினய்முற்று", new Set(["வே",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["வேகார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["வெந்தார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["வேகின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["வேவார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["வேக",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["வெந்து",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["வெந்த",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["வேகின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["வேகும்",],),],
                    ["தொழிற்பெயர்", new Set(["வேதல்",],),],
                ],);
                t.deepEqual(getForms("வே",), expected,);
            },);
            QUnit.test("சா", t => {
                const expected = new Map([
                    ["இனம்", "சா",],
                    ["ஏவல்வினய்முற்று", new Set(["சா",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["சாகார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["செத்தார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["சாகின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["சாவார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["சாக",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["செத்து",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["செத்த",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["சாகின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["சாகும்",],),],
                    ["தொழிற்பெயர்", new Set(["சாதல்",],),],
                ],);
                t.deepEqual(getForms("சா",), expected,);
            },);
        },);
        QUnit.module("அடிப்படய்", () => {
            QUnit.test("அல்", t => {
                const expected = new Map([
                    ["இனம்", "அல்",],
                    ["ஏவல்வினய்முற்று", new Set(["",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["அல்லார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["அல்லார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["அல்லார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["அற்ற",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["அற்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["அற்ற",],),],
                    ["தொழிற்பெயர்", new Set(["",],),],
                ],);
                t.deepEqual(getForms("அல்",), expected,);
            },);
            QUnit.test("உள்", t => {
                const expected = new Map([
                    ["இனம்", "உள்",],
                    ["ஏவல்வினய்முற்று", new Set(["",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["உள்ளார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["உள்ளார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["உள்ளார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["உள்ள",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["உள்ள",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["உள்ள",],),],
                    ["தொழிற்பெயர்", new Set(["உள்ளுதல்",],),],
                ],);
                t.deepEqual(getForms("உள்",), expected,);
            },);
            QUnit.test("இல்", t => {
                const expected = new Map([
                    ["இனம்", "இல்",],
                    ["ஏவல்வினய்முற்று", new Set(["",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["இல்லார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["இல்லார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["இல்லார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["இல்லாத",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["இல்லாத",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["இல்லாத",],),],
                    ["தொழிற்பெயர்", new Set(["",],),],
                ],);
                t.deepEqual(getForms("இல்",), expected,);
            },);
            QUnit.test("மாட்டு", t => {
                const expected = new Map([
                    ["இனம்", "மாட்டு",],
                    ["ஏவல்வினய்முற்று", new Set(["",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["மாட்டார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["மாட்டார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["மாட்டார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["",],),],
                    ["தொழிற்பெயர்", new Set(["",],),],
                ],);
                t.deepEqual(getForms("மாட்டு", "மாட்டு",), expected,);
            },);
        },);
    },);
    QUnit.module("With ambiguous இனம்", () => {
        QUnit.module("படு", () => {
            QUnit.test("இனமில்லா படு", t => {
                t.throws(() => getForms("படு",), err => err instanceof Error &&
                    /^Multiple வினய் classes possible for படு: .*. Select one.$/v.test(err.message,),);
            },);
            QUnit.test("இடு இனத்தில் படு", t => {
                const expected = new Map([
                    ["இனம்", "இடு",],
                    ["ஏவல்வினய்முற்று", new Set(["படு",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["படார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["பட்டார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["படுகின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["படுவார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["பட",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["பட்டு",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["பட்ட",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["படுகின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["படும்",],),],
                    ["தொழிற்பெயர்", new Set(["பட்டல்", "படுதல்",],),],
                    [causativeFormsKey, new Map([
                        ["இனம்", "வாங்கு",],
                        ["ஏவல்வினய்முற்று", new Set(["படுத்து",],),],
                        ["எதிர்மறய்வினய்முற்று", new Set(["படுத்தார்",],),],
                        ["இறந்தகாலத்துவினய்முற்று", new Set(["படுத்தினார்",],),],
                        ["நிகழ்காலத்துவினய்முற்று", new Set(["படுத்துகின்றார்",],),],
                        ["எதிர்காலத்துவினய்முற்று", new Set(["படுத்துவார்",],),],
                        ["எதிர்காலத்துவினயெச்சம்", new Set(["படுத்த",],),],
                        ["இறந்தகாலத்துவினயெச்சம்", new Set(["படுத்தி",],),],
                        ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["படுத்திய", "படுத்தின",],),],
                        ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["படுத்துகின்ற",],),],
                        ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["படுத்தும்",],),],
                        ["தொழிற்பெயர்", new Set(["படுத்துதல்",],),],
                    ],),],
                ],);
                t.deepEqual(getForms("படு", "இடு",), expected,);
            },);
            QUnit.test("பார் இனத்தில் படு", t => {
                const expected = new Map([
                    ["இனம்", "பார்",],
                    ["ஏவல்வினய்முற்று", new Set(["படு",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["படார்", "படுக்கார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["படுத்தார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["படுக்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["படுப்பார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["படுக்க",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["படுத்து",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["படுத்த",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["படுக்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["படுக்கும்",],),],
                    ["தொழிற்பெயர்", new Set(["படுத்தல்",],),],
                ],);
                t.deepEqual(getForms("படு", "பார்",), expected,);
            },);
        },);
        QUnit.module("வய்", () => {
            QUnit.test("இனமில்லா வய்", t => {
                t.throws(() => getForms("வய்",), err => err instanceof Error &&
                    /^Multiple வினய் classes possible for வய்: .*. Select one.$/v.test(err.message,),);
            },);
            QUnit.test("செய் இனத்தில் வய்", t => {
                const expected = new Map([
                    ["இனம்", "செய்",],
                    ["ஏவல்வினய்முற்று", new Set(["வய்",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["வய்யார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["வய்தார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["வய்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["வய்வார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["வய்ய",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["வய்து",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["வய்த",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["வய்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["வய்யும்",],),],
                    ["தொழிற்பெயர்", new Set(["வய்தல்",],),],
                ],);
                t.deepEqual(getForms("வய்", "செய்",), expected,);
            },);
            QUnit.test("பார் இனத்தில் வய்", t => {
                const expected = new Map([
                    ["இனம்", "பார்",],
                    ["ஏவல்வினய்முற்று", new Set(["வய்",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["வய்யார்", "வய்க்கார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["வய்த்தார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["வய்க்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["வய்ப்பார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["வய்க்க",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["வய்த்து",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["வய்த்த",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["வய்க்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["வய்க்கும்",],),],
                    ["தொழிற்பெயர்", new Set(["வய்த்தல்",],),],
                ],);
                t.deepEqual(getForms("வய்", "பார்",), expected,);
            },);
        },);
    },);
    QUnit.module("With பிறவினய் forms", () => {
        QUnit.module("Rule0", () => {
            QUnit.test("சுடு", t => {
                const expected = new Map([
                    ["இனம்", "இடு",],
                    ["ஏவல்வினய்முற்று", new Set(["சுடு",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["சுடார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["சுட்டார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["சுடுகின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["சுடுவார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["சுட",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["சுட்டு",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["சுட்ட",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["சுடுகின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["சுடும்",],),],
                    ["தொழிற்பெயர்", new Set(["சுட்டல்", "சுடுதல்",],),],
                ],);
                t.deepEqual(getForms("சுடு",).get(causativeFormsKey,), expected,);
            },);
        },);
        QUnit.module("Rule1", () => {
            QUnit.test("சேர்", t => {
                const expected = new Map([
                    ["இனம்", "பார்",],
                    ["ஏவல்வினய்முற்று", new Set(["சேர்",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["சேரார்", "சேர்க்கார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["சேர்த்தார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["சேர்க்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["சேர்ப்பார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["சேர்க்க",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["சேர்த்து",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["சேர்த்த",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["சேர்க்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["சேர்க்கும்",],),],
                    ["தொழிற்பெயர்", new Set(["சேர்த்தல்",],),],
                ],);
                t.deepEqual(getForms("சேர்",).get(causativeFormsKey,), expected,);
            },);
        },);
        QUnit.module("Rule10", () => {
            QUnit.test("நட", t => {
                const expected = [
                    new Map([
                        ["இனம்", "வாங்கு",],
                        ["ஏவல்வினய்முற்று", new Set(["நடத்து",],),],
                        ["எதிர்மறய்வினய்முற்று", new Set(["நடத்தார்",],),],
                        ["இறந்தகாலத்துவினய்முற்று", new Set(["நடத்தினார்",],),],
                        ["நிகழ்காலத்துவினய்முற்று", new Set(["நடத்துகின்றார்",],),],
                        ["எதிர்காலத்துவினய்முற்று", new Set(["நடத்துவார்",],),],
                        ["எதிர்காலத்துவினயெச்சம்", new Set(["நடத்த",],),],
                        ["இறந்தகாலத்துவினயெச்சம்", new Set(["நடத்தி",],),],
                        ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["நடத்திய", "நடத்தின",],),],
                        ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["நடத்துகின்ற",],),],
                        ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["நடத்தும்",],),],
                        ["தொழிற்பெயர்", new Set(["நடத்துதல்",],),],
                    ],),
                    new Map([
                        ["இனம்", "பார்",],
                        ["ஏவல்வினய்முற்று", new Set(["நடப்பி",],),],
                        ["எதிர்மறய்வினய்முற்று", new Set(["நடப்பியார்", "நடப்பிக்கார்",],),],
                        ["இறந்தகாலத்துவினய்முற்று", new Set(["நடப்பித்தார்",],),],
                        ["நிகழ்காலத்துவினய்முற்று", new Set(["நடப்பிக்கின்றார்",],),],
                        ["எதிர்காலத்துவினய்முற்று", new Set(["நடப்பிப்பார்",],),],
                        ["எதிர்காலத்துவினயெச்சம்", new Set(["நடப்பிக்க",],),],
                        ["இறந்தகாலத்துவினயெச்சம்", new Set(["நடப்பித்து",],),],
                        ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["நடப்பித்த",],),],
                        ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["நடப்பிக்கின்ற",],),],
                        ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["நடப்பிக்கும்",],),],
                        ["தொழிற்பெயர்", new Set(["நடப்பித்தல்",],),],
                    ],),
                ];
                t.deepEqual(getForms("நட",).get(causativeFormsKey,), expected,);
            },);
            QUnit.test("நீள்", t => {
                const expected = new Map([
                    ["இனம்", "வாங்கு",],
                    ["ஏவல்வினய்முற்று", new Set(["நீட்டு",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["நீட்டார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["நீட்டினார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["நீட்டுகின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["நீட்டுவார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["நீட்ட",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["நீட்டி",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["நீட்டிய", "நீட்டின",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["நீட்டுகின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["நீட்டும்",],),],
                    ["தொழிற்பெயர்", new Set(["நீட்டுதல்",],),],
                ],);
                t.deepEqual(getForms("நீள்",).get(causativeFormsKey,), expected,);
            },);
        },);
        QUnit.module("Rule11", () => {
            QUnit.test("அடு", t => {
                const expected = new Map([
                    ["இனம்", "வாங்கு",],
                    ["ஏவல்வினய்முற்று", new Set(["அடுக்கு",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["அடுக்கார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["அடுக்கினார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["அடுக்குகின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["அடுக்குவார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["அடுக்க",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["அடுக்கி",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["அடுக்கிய", "அடுக்கின",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["அடுக்குகின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["அடுக்கும்",],),],
                    ["தொழிற்பெயர்", new Set(["அடுக்குதல்",],),],
                ],);
                t.deepEqual(getForms("அடு",).get(causativeFormsKey,), expected,);
            },);
        },);
        QUnit.module("Rule12", () => {
            QUnit.test("காய்", t => {
                const expected = [
                    new Map([
                        ["இனம்", "பார்",],
                        ["ஏவல்வினய்முற்று", new Set(["காய்",],),],
                        ["எதிர்மறய்வினய்முற்று", new Set(["காயார்", "காய்க்கார்",],),],
                        ["இறந்தகாலத்துவினய்முற்று", new Set(["காய்த்தார்",],),],
                        ["நிகழ்காலத்துவினய்முற்று", new Set(["காய்க்கின்றார்",],),],
                        ["எதிர்காலத்துவினய்முற்று", new Set(["காய்ப்பார்",],),],
                        ["எதிர்காலத்துவினயெச்சம்", new Set(["காய்க்க",],),],
                        ["இறந்தகாலத்துவினயெச்சம்", new Set(["காய்த்து",],),],
                        ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["காய்த்த",],),],
                        ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["காய்க்கின்ற",],),],
                        ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["காய்க்கும்",],),],
                        ["தொழிற்பெயர்", new Set(["காய்த்தல்",],),],
                    ],),
                    new Map([
                        ["இனம்", "வாங்கு",],
                        ["ஏவல்வினய்முற்று", new Set(["காய்ச்சு",],),],
                        ["எதிர்மறய்வினய்முற்று", new Set(["காய்ச்சார்",],),],
                        ["இறந்தகாலத்துவினய்முற்று", new Set(["காய்ச்சினார்",],),],
                        ["நிகழ்காலத்துவினய்முற்று", new Set(["காய்ச்சுகின்றார்",],),],
                        ["எதிர்காலத்துவினய்முற்று", new Set(["காய்ச்சுவார்",],),],
                        ["எதிர்காலத்துவினயெச்சம்", new Set(["காய்ச்ச",],),],
                        ["இறந்தகாலத்துவினயெச்சம்", new Set(["காய்ச்சி",],),],
                        ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["காய்ச்சிய", "காய்ச்சின",],),],
                        ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["காய்ச்சுகின்ற",],),],
                        ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["காய்ச்சும்",],),],
                        ["தொழிற்பெயர்", new Set(["காய்ச்சுதல்",],),],
                    ],),
                ];
                t.deepEqual(getForms("காய்",).get(causativeFormsKey,), expected,);
            },);
        },);
        QUnit.module("Rule13", () => {
            QUnit.test("பர", t => {
                const expected = new Map([
                    ["இனம்", "வாங்கு",],
                    ["ஏவல்வினய்முற்று", new Set(["பரப்பு",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["பரப்பார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["பரப்பினார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["பரப்புகின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["பரப்புவார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["பரப்ப",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["பரப்பி",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["பரப்பிய", "பரப்பின",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["பரப்புகின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["பரப்பும்",],),],
                    ["தொழிற்பெயர்", new Set(["பரப்புதல்",],),],
                ],);
                t.deepEqual(getForms("பர",).get(causativeFormsKey,), expected,);
            },);
        },);
        QUnit.module("Rule20", () => {
            QUnit.test("செய்", t => {
                const expected = new Map([
                    ["இனம்", "பார்",],
                    ["ஏவல்வினய்முற்று", new Set(["செய்வி",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["செய்வியார்", "செய்விக்கார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["செய்வித்தார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["செய்விக்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["செய்விப்பார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["செய்விக்க",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["செய்வித்து",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["செய்வித்த",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["செய்விக்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["செய்விக்கும்",],),],
                    ["தொழிற்பெயர்", new Set(["செய்வித்தல்",],),],
                ],);
                t.deepEqual(getForms("செய்",).get(causativeFormsKey,), expected,);
            },);
            QUnit.test("தெரி", t => {
                const expected = new Map([
                    ["இனம்", "பார்",],
                    ["ஏவல்வினய்முற்று", new Set(["தெரிவி",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["தெரிவியார்", "தெரிவிக்கார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["தெரிவித்தார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["தெரிவிக்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["தெரிவிப்பார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["தெரிவிக்க",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["தெரிவித்து",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["தெரிவித்த",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["தெரிவிக்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["தெரிவிக்கும்",],),],
                    ["தொழிற்பெயர்", new Set(["தெரிவித்தல்",],),],
                ],);
                t.deepEqual(getForms("தெரி",).get(causativeFormsKey,), expected,);
            },);
        },);
        QUnit.module("Rule21", () => {
            QUnit.test("கல்", t => {
                const expected = new Map([
                    ["இனம்", "பார்",],
                    ["ஏவல்வினய்முற்று", new Set(["கற்பி",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["கற்பியார்", "கற்பிக்கார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["கற்பித்தார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["கற்பிக்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["கற்பிப்பார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["கற்பிக்க",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["கற்பித்து",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["கற்பித்த",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["கற்பிக்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["கற்பிக்கும்",],),],
                    ["தொழிற்பெயர்", new Set(["கற்பித்தல்",],),],
                ],);
                t.deepEqual(getForms("கல்",).get(causativeFormsKey,), expected,);
            },);
            QUnit.test("சிற", t => {
                const expected = new Map([
                    ["இனம்", "பார்",],
                    ["ஏவல்வினய்முற்று", new Set(["சிறப்பி",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["சிறப்பியார்", "சிறப்பிக்கார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["சிறப்பித்தார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["சிறப்பிக்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["சிறப்பிப்பார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["சிறப்பிக்க",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["சிறப்பித்து",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["சிறப்பித்த",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["சிறப்பிக்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["சிறப்பிக்கும்",],),],
                    ["தொழிற்பெயர்", new Set(["சிறப்பித்தல்",],),],
                ],);
                t.deepEqual(getForms("சிற",).get(causativeFormsKey,), expected,);
            },);
        },);
        QUnit.module("Rule30", () => {
            QUnit.test("ஆடு", t => {
                const expected = new Map([
                    ["இனம்", "வாங்கு",],
                    ["ஏவல்வினய்முற்று", new Set(["ஆட்டு",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["ஆட்டார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["ஆட்டினார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["ஆட்டுகின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["ஆட்டுவார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["ஆட்ட",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["ஆட்டி",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["ஆட்டிய", "ஆட்டின",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["ஆட்டுகின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["ஆட்டும்",],),],
                    ["தொழிற்பெயர்", new Set(["ஆட்டுதல்",],),],
                ],);
                t.deepEqual(getForms("ஆடு",).get(causativeFormsKey,), expected,);
            },);
            QUnit.test("எழும்பு", t => {
                const expected = new Map([
                    ["இனம்", "வாங்கு",],
                    ["ஏவல்வினய்முற்று", new Set(["எழுப்பு",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["எழுப்பார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["எழுப்பினார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["எழுப்புகின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["எழுப்புவார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["எழுப்ப",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["எழுப்பி",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["எழுப்பிய", "எழுப்பின",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["எழுப்புகின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["எழுப்பும்",],),],
                    ["தொழிற்பெயர்", new Set(["எழுப்புதல்",],),],
                ],);
                t.deepEqual(getForms("எழும்பு",).get(causativeFormsKey,), expected,);
            },);
        },);
    },);
    QUnit.module("புத்தெழுத்துமுறய்", () => {
        QUnit.test("மறை", t => {
            const expected = new Map([
                ["இனம்", "உயர்",],
                ["ஏவல்வினய்முற்று", new Set(["மறை",],),],
                ["எதிர்மறய்வினய்முற்று", new Set(["மறையார்",],),],
                ["இறந்தகாலத்துவினய்முற்று", new Set(["மறைந்தார்",],),],
                ["நிகழ்காலத்துவினய்முற்று", new Set(["மறைகின்றார்",],),],
                ["எதிர்காலத்துவினய்முற்று", new Set(["மறைவார்",],),],
                ["எதிர்காலத்துவினயெச்சம்", new Set(["மறைய",],),],
                ["இறந்தகாலத்துவினயெச்சம்", new Set(["மறைந்து",],),],
                ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["மறைந்த",],),],
                ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["மறைகின்ற",],),],
                ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["மறையும்",],),],
                ["தொழிற்பெயர்", new Set(["மறைதல்",],),],
                [causativeFormsKey, new Map([
                    ["இனம்", "பார்",],
                    ["ஏவல்வினய்முற்று", new Set(["மறை",],),],
                    ["எதிர்மறய்வினய்முற்று", new Set(["மறையார்", "மறைக்கார்",],),],
                    ["இறந்தகாலத்துவினய்முற்று", new Set(["மறைத்தார்",],),],
                    ["நிகழ்காலத்துவினய்முற்று", new Set(["மறைக்கின்றார்",],),],
                    ["எதிர்காலத்துவினய்முற்று", new Set(["மறைப்பார்",],),],
                    ["எதிர்காலத்துவினயெச்சம்", new Set(["மறைக்க",],),],
                    ["இறந்தகாலத்துவினயெச்சம்", new Set(["மறைத்து",],),],
                    ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["மறைத்த",],),],
                    ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["மறைக்கின்ற",],),],
                    ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["மறைக்கும்",],),],
                    ["தொழிற்பெயர்", new Set(["மறைத்தல்",],),],
                ],),],
            ],);
            t.deepEqual(getForms("மறை", null, true,), expected,);
        },);
        QUnit.test("வை", t => {
            const expected = new Map([
                ["இனம்", "பார்",],
                ["ஏவல்வினய்முற்று", new Set(["வை",],),],
                ["எதிர்மறய்வினய்முற்று", new Set(["வையார்", "வைக்கார்",],),],
                ["இறந்தகாலத்துவினய்முற்று", new Set(["வைத்தார்",],),],
                ["நிகழ்காலத்துவினய்முற்று", new Set(["வைக்கின்றார்",],),],
                ["எதிர்காலத்துவினய்முற்று", new Set(["வைப்பார்",],),],
                ["எதிர்காலத்துவினயெச்சம்", new Set(["வைக்க",],),],
                ["இறந்தகாலத்துவினயெச்சம்", new Set(["வைத்து",],),],
                ["இறந்தகாலத்துப்பெயரெச்சம்", new Set(["வைத்த",],),],
                ["நிகழ்காலத்துப்பெயரெச்சம்", new Set(["வைக்கின்ற",],),],
                ["எதிர்காலத்துப்பெயரெச்சம்", new Set(["வைக்கும்",],),],
                ["தொழிற்பெயர்", new Set(["வைத்தல்",],),],
            ],);
            t.deepEqual(getForms("வை", "பார்", true,), expected,);
        },);
    },);
    QUnit.module("Invalid getForms", () => {
        QUnit.test("அ as a வினயினம்", t => {
            t.throws(
                () => getForms("படு", "அ",),
                err => err instanceof Error &&
                    /^Unknown வினயினம் .*\.$/v.test(err.message,),
            );
        },);
        QUnit.test("இல் as the வினயினம் for அல்", t => {
            t.throws(
                () => getForms("அல்", "இல்",),
                err => err instanceof Error &&
                    /^வினய் .* isn't valid for வினயினம் .*\.$/v.test(err.message,),
            );
        },);
        QUnit.test("அ as a வினய்", t => {
            t.throws(
                () => getForms("அ",),
                err => err instanceof Error &&
                    /^Unknown வினய் .*\.$/v.test(err.message,),
            );
        },);
    },);
},);
